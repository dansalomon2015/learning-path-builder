import React, { useState, useCallback } from 'react';
import { LearningPlan, User, StudyMode } from './types';
import { MOCK_PLANS, MOCK_USER } from './data/mockData';
import Header from './components/Header';
import LandingPage from './components/LandingPage';
import Dashboard from './components/Dashboard';
import FlashcardView from './components/FlashcardView';
import ProfilePage from './components/ProfilePage';

type AppView = 'landing' | 'dashboard' | 'studying' | 'profile';

const App: React.FC = () => {
  const [user, setUser] = useState<User | null>(null);
  const [plans, setPlans] = useState<LearningPlan[]>([]);
  const [currentView, setCurrentView] = useState<AppView>('landing');
  const [activePlan, setActivePlan] = useState<LearningPlan | null>(null);
  const [activeStudyMode, setActiveStudyMode] = useState<StudyMode>('spaced-repetition');


  const handleLogin = useCallback(() => {
    setUser(MOCK_USER);
    setPlans(MOCK_PLANS);
    setCurrentView('dashboard');
  }, []);

  const handleLogout = useCallback(() => {
    setUser(null);
    setPlans([]);
    setCurrentView('landing');
    setActivePlan(null);
  }, []);
  
  const handleViewProfile = useCallback(() => {
    setCurrentView('profile');
  }, []);

  const handleStartStudy = useCallback((plan: LearningPlan, mode: StudyMode) => {
    setActivePlan(plan);
    setActiveStudyMode(mode);
    setCurrentView('studying');
  }, []);

  const handleBackToDashboard = useCallback(() => {
    setActivePlan(null);
    setCurrentView('dashboard');
  }, []);

  const handleCreatePlan = useCallback((title: string, level: string) => {
    const isFromDocument = title.startsWith('Learning from ');

    const newPlan: LearningPlan = {
      id: `plan-${Date.now()}`,
      title,
      level,
      flashcards: isFromDocument
        ? [
            { id: 'new-1', question: `What is the main topic of the uploaded document?`, answer: `The main topic is... [Generated by AI from document]`, example: `[A relevant code snippet or quote from the document generated by AI]` },
            { id: 'new-2', question: `Summarize a key section for a ${level}.`, answer: `A key section summary is... [Generated by AI from document]` },
            { id: 'new-3', question: `Identify a complex term mentioned in the document.`, answer: `A complex term is... [Generated by AI from document]` },
          ]
        : [
            { id: 'new-1', question: `What is the core concept of ${title}?`, answer: `The core concept is... [Generated by AI]`, example: `[Usage example generated by AI]` },
            { id: 'new-2', question: `Explain a key principle of ${title} for a ${level}.`, answer: `A key principle is... [Generated by AI]` },
            { id: 'new-3', question: `What is an example application of ${title}?`, answer: `An example is... [Generated by AI]` },
          ],
    };
    setPlans(prevPlans => [newPlan, ...prevPlans]);
  }, []);
  
  const handleUpdatePlan = useCallback((planId: string, newTitle: string, newLevel: string) => {
    setPlans(prevPlans =>
      prevPlans.map(p =>
        p.id === planId ? { ...p, title: newTitle, level: newLevel } : p
      )
    );
  }, []);

  const handleDeletePlan = useCallback((planId: string) => {
    setPlans(prevPlans => prevPlans.filter(p => p.id !== planId));
  }, []);

  const handleUpdateUser = useCallback((updatedUser: User) => {
    setUser(updatedUser);
  }, []);

  const handleDeleteAccount = useCallback(() => {
    // In a real app, this would be a DELETE API call.
    // For mock, we just log out and reset.
    handleLogout();
  }, [handleLogout]);


  const renderContent = () => {
    switch (currentView) {
      case 'studying':
        return activePlan ? <FlashcardView plan={activePlan} mode={activeStudyMode} onBack={handleBackToDashboard} /> : <Dashboard plans={plans} onStartStudy={handleStartStudy} onCreatePlan={handleCreatePlan} onUpdatePlan={handleUpdatePlan} onDeletePlan={handleDeletePlan} />;
      case 'dashboard':
        return <Dashboard plans={plans} onStartStudy={handleStartStudy} onCreatePlan={handleCreatePlan} onUpdatePlan={handleUpdatePlan} onDeletePlan={handleDeletePlan} />;
      case 'profile':
        return user ? <ProfilePage user={user} plans={plans} onUpdateUser={handleUpdateUser} onDeleteAccount={handleDeleteAccount} onBackToDashboard={handleBackToDashboard} /> : <LandingPage onLogin={handleLogin} />;
      case 'landing':
      default:
        return <LandingPage onLogin={handleLogin} />;
    }
  };

  return (
    <div className="min-h-screen bg-slate-50 text-slate-800 font-sans">
      <Header user={user} onLogin={handleLogin} onLogout={handleLogout} onViewProfile={handleViewProfile} />
      <main className="container mx-auto px-4 py-8">
        {renderContent()}
      </main>
    </div>
  );
};

export default App;