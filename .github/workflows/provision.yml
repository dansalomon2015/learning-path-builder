name: Provision Cloud Run Services

on:
  workflow_dispatch:
    inputs:
      project_id:
        description: 'GCP Project ID (optional, uses GCP_PROJECT_ID secret if not provided)'
        required: false
        type: string
      region:
        description: 'GCP Region (optional, uses GCP_REGION secret if not provided, defaults to us-central1)'
        required: false
        type: string

env:
  PROJECT_ID: ${{ github.event.inputs.project_id || secrets.GCP_PROJECT_ID }}
  REGION: ${{ github.event.inputs.region || secrets.GCP_REGION || 'us-central1' }}
  BACKEND_SERVICE: flashlearn-ai-backend
  FRONTEND_SERVICE: flashlearn-ai-frontend

jobs:
  provision-services:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Validate required secrets
        run: |
          if [ -z "${{ env.PROJECT_ID }}" ]; then
            echo "❌ Error: GCP_PROJECT_ID secret is required"
            echo "Please set GCP_PROJECT_ID in GitHub repository secrets or provide it as input"
            exit 1
          fi
          echo "✅ Using PROJECT_ID: ${{ env.PROJECT_ID }}"
          echo "✅ Using REGION: ${{ env.REGION }}"

      - name: Set GCP Project
        run: gcloud config set project ${{ env.PROJECT_ID }}

      - name: Enable required APIs
        run: |
          echo "🔧 Enabling required Google Cloud APIs..."
          echo "⚠️  Note: This requires the service account to have 'Service Usage Admin' role"

          # Enable APIs with error handling
          gcloud services enable cloudbuild.googleapis.com || echo "⚠️  Failed to enable cloudbuild.googleapis.com (may already be enabled)"
          gcloud services enable run.googleapis.com || echo "⚠️  Failed to enable run.googleapis.com (may already be enabled)"
          gcloud services enable containerregistry.googleapis.com || echo "⚠️  Failed to enable containerregistry.googleapis.com (may already be enabled)"
          gcloud services enable secretmanager.googleapis.com || echo "⚠️  Failed to enable secretmanager.googleapis.com (may already be enabled)"
          gcloud services enable firebase.googleapis.com || echo "⚠️  Failed to enable firebase.googleapis.com (may already be enabled)"

          echo "✅ API enablement completed"

      - name: Create Secret Manager secrets if not exists
        run: |
          echo "🔐 Setting up secrets in Secret Manager..."

          # Check and create firebase-config secret
          if ! gcloud secrets describe firebase-config --project=${{ env.PROJECT_ID }} &>/dev/null; then
            echo "Creating firebase-config secret (placeholder)..."
            echo -n '{"project_id":"your-project-id","serviceAccount":{}}' | gcloud secrets create firebase-config \
              --data-file=- \
              --replication-policy="automatic" \
              --project=${{ env.PROJECT_ID }}
            echo "⚠️  Note: Update firebase-config secret with actual Firebase config JSON"
          fi

          # Check and create gemini-api-key secret
          if ! gcloud secrets describe gemini-api-key --project=${{ env.PROJECT_ID }} &>/dev/null; then
            echo "Creating gemini-api-key secret (placeholder)..."
            echo -n 'your-gemini-api-key' | gcloud secrets create gemini-api-key \
              --data-file=- \
              --replication-policy="automatic" \
              --project=${{ env.PROJECT_ID }}
            echo "⚠️  Note: Update gemini-api-key secret with actual value"
          fi

          echo "✅ Secrets created/verified"

      - name: Update secret versions from GitHub secrets
        run: |
          echo "📝 Updating secret versions from GitHub secrets..."

          echo "⚠️  Manual step required: Update secret values using:"
          echo "   cat firebase-config.json | gcloud secrets versions add firebase-config --data-file=-"
          echo "   echo -n 'your-actual-api-key' | gcloud secrets versions add gemini-api-key --data-file=-"

      - name: Grant Cloud Run access to secrets
        run: |
          echo "🔑 Granting Cloud Run service account access to secrets..."

          # Get the Cloud Run service account
          PROJECT_NUMBER=$(gcloud projects describe ${{ env.PROJECT_ID }} --format="value(projectNumber)")
          CLOUD_RUN_SA="${PROJECT_NUMBER}-compute@developer.gserviceaccount.com"

          # Grant access to secrets
          gcloud secrets add-iam-policy-binding firebase-config \
            --member="serviceAccount:${CLOUD_RUN_SA}" \
            --role="roles/secretmanager.secretAccessor" \
            --project=${{ env.PROJECT_ID }} || true

          gcloud secrets add-iam-policy-binding gemini-api-key \
            --member="serviceAccount:${CLOUD_RUN_SA}" \
            --role="roles/secretmanager.secretAccessor" \
            --project=${{ env.PROJECT_ID }} || true

          echo "✅ Secret access granted"

      - name: Provision backend service (if not exists)
        id: provision-backend
        run: |
          echo "🏗️  Provisioning backend service..."

          # Check if service exists
          if gcloud run services describe ${{ env.BACKEND_SERVICE }} \
            --region=${{ env.REGION }} \
            --project=${{ env.PROJECT_ID }} &>/dev/null; then
            echo "✅ Backend service already exists"
            BACKEND_URL=$(gcloud run services describe ${{ env.BACKEND_SERVICE }} \
              --region=${{ env.REGION }} \
              --project=${{ env.PROJECT_ID }} \
              --format="value(status.url)")
            echo "url=$BACKEND_URL" >> $GITHUB_OUTPUT
            
            # Ensure service is publicly accessible
            echo "🔓 Ensuring backend service is publicly accessible..."
            gcloud run services add-iam-policy-binding ${{ env.BACKEND_SERVICE }} \
              --region=${{ env.REGION }} \
              --project=${{ env.PROJECT_ID }} \
              --member="allUsers" \
              --role="roles/run.invoker" \
              || echo "⚠️  Service may already be public or IAM update failed"
          else
            echo "Creating backend service (placeholder image)..."
            # Use a placeholder image for initial provisioning
            BACKEND_URL=$(gcloud run deploy ${{ env.BACKEND_SERVICE }} \
              --image gcr.io/cloudrun/hello \
              --platform managed \
              --region=${{ env.REGION }} \
              --project=${{ env.PROJECT_ID }} \
              --allow-unauthenticated \
              --port 3000 \
              --memory 1Gi \
              --cpu 1 \
              --min-instances 0 \
              --max-instances 10 \
              --timeout 300 \
              --set-env-vars NODE_ENV=production \
              --format="value(status.url)")
            
            echo "url=$BACKEND_URL" >> $GITHUB_OUTPUT
            echo "✅ Backend service created at: $BACKEND_URL"
          fi

      - name: Provision frontend service (if not exists)
        id: provision-frontend
        run: |
          echo "🏗️  Provisioning frontend service..."

          # Check if service exists
          if gcloud run services describe ${{ env.FRONTEND_SERVICE }} \
            --region=${{ env.REGION }} \
            --project=${{ env.PROJECT_ID }} &>/dev/null; then
            echo "✅ Frontend service already exists"
            FRONTEND_URL=$(gcloud run services describe ${{ env.FRONTEND_SERVICE }} \
              --region=${{ env.REGION }} \
              --project=${{ env.PROJECT_ID }} \
              --format="value(status.url)")
            echo "url=$FRONTEND_URL" >> $GITHUB_OUTPUT
            
            # Ensure service is publicly accessible
            echo "🔓 Ensuring frontend service is publicly accessible..."
            gcloud run services add-iam-policy-binding ${{ env.FRONTEND_SERVICE }} \
              --region=${{ env.REGION }} \
              --project=${{ env.PROJECT_ID }} \
              --member="allUsers" \
              --role="roles/run.invoker" \
              || echo "⚠️  Service may already be public or IAM update failed"
          else
            echo "Creating frontend service (placeholder image)..."
            # Use a placeholder image for initial provisioning
            BACKEND_URL=${{ steps.provision-backend.outputs.url }}
            FRONTEND_URL=$(gcloud run deploy ${{ env.FRONTEND_SERVICE }} \
              --image gcr.io/cloudrun/hello \
              --platform managed \
              --region=${{ env.REGION }} \
              --project=${{ env.PROJECT_ID }} \
              --allow-unauthenticated \
              --port 80 \
              --memory 512Mi \
              --cpu 1 \
              --min-instances 0 \
              --max-instances 5 \
              --timeout 60 \
              --set-env-vars VITE_API_URL=$BACKEND_URL/api \
              --format="value(status.url)")
            
            echo "url=$FRONTEND_URL" >> $GITHUB_OUTPUT
            echo "✅ Frontend service created at: $FRONTEND_URL"
          fi

      - name: Provision Summary
        run: |
          echo "## 🎉 Provisioning Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Backend: ${{ steps.provision-backend.outputs.url }}" >> $GITHUB_STEP_SUMMARY
          echo "✅ Frontend: ${{ steps.provision-frontend.outputs.url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📝 Next steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Update secret values (if using placeholders):" >> $GITHUB_STEP_SUMMARY
          echo "   - firebase-config: \`cat firebase-config.json | gcloud secrets versions add firebase-config --data-file=-\`" >> $GITHUB_STEP_SUMMARY
          echo "   - gemini-api-key: \`echo -n 'your-api-key' | gcloud secrets versions add gemini-api-key --data-file=-\`" >> $GITHUB_STEP_SUMMARY
          echo "2. Run the deploy workflow to build and deploy your application" >> $GITHUB_STEP_SUMMARY
