name: Deploy to Cloud Run

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      service:
        description: 'Service to deploy (backend, frontend, or both)'
        required: false
        default: 'both'
        type: choice
        options:
          - both
          - backend
          - frontend

# Prevent concurrent deployments
concurrency:
  group: deploy
  cancel-in-progress: false

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: ${{ secrets.GCP_REGION || 'us-central1' }}
  BACKEND_SERVICE: flashlearn-ai-backend
  FRONTEND_SERVICE: flashlearn-ai-frontend

jobs:
  deploy-backend:
    if: github.event.inputs.service == 'both' || github.event.inputs.service == 'backend' || github.event_name == 'push'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for GCR
        run: gcloud auth configure-docker

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test:ci

      - name: Build backend
        run: |
          cd packages/backend
          npm run build

      - name: Build Docker image for backend
        run: |
          docker build -f packages/backend/Dockerfile \
            -t gcr.io/${{ env.PROJECT_ID }}/${{ env.BACKEND_SERVICE }}:${{ github.sha }} \
            -t gcr.io/${{ env.PROJECT_ID }}/${{ env.BACKEND_SERVICE }}:latest \
            .

      - name: Push Docker image to GCR
        run: |
          docker push gcr.io/${{ env.PROJECT_ID }}/${{ env.BACKEND_SERVICE }}:${{ github.sha }}
          docker push gcr.io/${{ env.PROJECT_ID }}/${{ env.BACKEND_SERVICE }}:latest

      - name: Ensure Cloud Run service account has secret access
        run: |
          echo "üîë Ensuring Cloud Run service account has secret access..."

          PROJECT_NUMBER=$(gcloud projects describe ${{ env.PROJECT_ID }} --format="value(projectNumber)")
          CLOUD_RUN_SA="${PROJECT_NUMBER}-compute@developer.gserviceaccount.com"

          gcloud secrets add-iam-policy-binding firebase-config \
            --member="serviceAccount:${CLOUD_RUN_SA}" \
            --role="roles/secretmanager.secretAccessor" \
            --project=${{ env.PROJECT_ID }} || true

          gcloud secrets add-iam-policy-binding firebase-project-id \
            --member="serviceAccount:${CLOUD_RUN_SA}" \
            --role="roles/secretmanager.secretAccessor" \
            --project=${{ env.PROJECT_ID }} || true

          gcloud secrets add-iam-policy-binding gemini-api-key \
            --member="serviceAccount:${CLOUD_RUN_SA}" \
            --role="roles/secretmanager.secretAccessor" \
            --project=${{ env.PROJECT_ID }} || true

          echo "‚úÖ Permissions verified"

      - name: Check if secrets exist
        id: check-secrets
        continue-on-error: true
        run: |
          if gcloud secrets describe firebase-config --project=${{ env.PROJECT_ID }} &>/dev/null && \
             gcloud secrets describe firebase-project-id --project=${{ env.PROJECT_ID }} &>/dev/null && \
             gcloud secrets describe gemini-api-key --project=${{ env.PROJECT_ID }} &>/dev/null; then
            echo "secrets_exist=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Secrets exist in Secret Manager"
          else
            echo "secrets_exist=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è  Secrets not found. Deploying without secrets (you'll need to configure them manually)"
          fi

      - name: Deploy backend to Cloud Run
        id: deploy-backend
        run: |
          # Build base deploy command arguments
          set -e

          BACKEND_URL=$(gcloud run deploy ${{ env.BACKEND_SERVICE }} \
            --image gcr.io/${{ env.PROJECT_ID }}/${{ env.BACKEND_SERVICE }}:${{ github.sha }} \
            --platform managed \
            --region ${{ env.REGION }} \
            --allow-unauthenticated \
            --port 3000 \
            --memory 1Gi \
            --cpu 1 \
            --min-instances 0 \
            --max-instances 10 \
            --timeout 300 \
            --set-env-vars NODE_ENV=production \
            $([ "${{ steps.check-secrets.outputs.secrets_exist }}" == "true" ] && echo "--set-secrets FIREBASE_CONFIG=firebase-config:latest,firebase-project-id=firebase-project-id:latest,GEMINI_API_KEY=gemini-api-key:latest" || echo "") \
            --format="value(status.url)")

          echo "url=$BACKEND_URL" >> $GITHUB_OUTPUT
          echo "‚úÖ Backend deployed at: $BACKEND_URL"

          if [ "${{ steps.check-secrets.outputs.secrets_exist }}" != "true" ]; then
            echo "‚ö†Ô∏è  Deployed without secrets. Configure them manually after deployment."
          fi

      - name: Get backend URL
        id: backend-url
        run: |
          BACKEND_URL=$(gcloud run services describe ${{ env.BACKEND_SERVICE }} \
            --region=${{ env.REGION }} \
            --format="value(status.url)")
          echo "url=$BACKEND_URL" >> $GITHUB_OUTPUT

  deploy-frontend:
    if: github.event.inputs.service == 'both' || github.event.inputs.service == 'frontend' || github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: deploy-backend
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for GCR
        run: gcloud auth configure-docker

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test:ci

      - name: Get backend URL for frontend build
        id: backend-url
        run: |
          BACKEND_URL=$(gcloud run services describe ${{ env.BACKEND_SERVICE }} \
            --region=${{ env.REGION }} \
            --format="value(status.url)")
          echo "url=$BACKEND_URL" >> $GITHUB_OUTPUT
          echo "Backend URL for frontend build: $BACKEND_URL"

      - name: Build frontend
        env:
          VITE_API_URL: ${{ steps.backend-url.outputs.url || needs.deploy-backend.outputs.url }}/api
        run: |
          cd packages/frontend
          npm run build

      - name: Build Docker image for frontend
        run: |
          docker build -f packages/frontend/Dockerfile \
            -t gcr.io/${{ env.PROJECT_ID }}/${{ env.FRONTEND_SERVICE }}:${{ github.sha }} \
            -t gcr.io/${{ env.PROJECT_ID }}/${{ env.FRONTEND_SERVICE }}:latest \
            .

      - name: Push Docker image to GCR
        run: |
          docker push gcr.io/${{ env.PROJECT_ID }}/${{ env.FRONTEND_SERVICE }}:${{ github.sha }}
          docker push gcr.io/${{ env.PROJECT_ID }}/${{ env.FRONTEND_SERVICE }}:latest

      - name: Get Firebase config from Secret Manager
        id: firebase-config
        continue-on-error: true
        run: |
          if gcloud secrets describe firebase-config --project=${{ env.PROJECT_ID }} &>/dev/null; then
            echo "Fetching Firebase config from Secret Manager..."
            FIREBASE_JSON=$(gcloud secrets versions access latest --secret=firebase-config --project=${{ env.PROJECT_ID }})
            echo "firebase_config_json<<EOF" >> $GITHUB_OUTPUT
            echo "$FIREBASE_JSON" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            
            # Extract individual values using jq or Python
            FIREBASE_API_KEY=$(echo "$FIREBASE_JSON" | grep -o '"api_key"[[:space:]]*:[[:space:]]*"[^"]*"' | cut -d'"' -f4 || echo "")
            FIREBASE_AUTH_DOMAIN=$(echo "$FIREBASE_JSON" | grep -o '"auth_domain"[[:space:]]*:[[:space:]]*"[^"]*"' | cut -d'"' -f4 || echo "")
            FIREBASE_PROJECT_ID=$(echo "$FIREBASE_JSON" | grep -o '"project_id"[[:space:]]*:[[:space:]]*"[^"]*"' | cut -d'"' -f4 || echo "")
            FIREBASE_STORAGE_BUCKET=$(echo "$FIREBASE_JSON" | grep -o '"storage_bucket"[[:space:]]*:[[:space:]]*"[^"]*"' | cut -d'"' -f4 || echo "")
            FIREBASE_MESSAGING_SENDER_ID=$(echo "$FIREBASE_JSON" | grep -o '"messaging_sender_id"[[:space:]]*:[[:space:]]*"[^"]*"' | cut -d'"' -f4 || echo "")
            FIREBASE_APP_ID=$(echo "$FIREBASE_JSON" | grep -o '"app_id"[[:space:]]*:[[:space:]]*"[^"]*"' | cut -d'"' -f4 || echo "")
            FIREBASE_MEASUREMENT_ID=$(echo "$FIREBASE_JSON" | grep -o '"measurement_id"[[:space:]]*:[[:space:]]*"[^"]*"' | cut -d'"' -f4 || echo "")
            
            echo "api_key=$FIREBASE_API_KEY" >> $GITHUB_OUTPUT
            echo "auth_domain=$FIREBASE_AUTH_DOMAIN" >> $GITHUB_OUTPUT
            echo "project_id=$FIREBASE_PROJECT_ID" >> $GITHUB_OUTPUT
            echo "storage_bucket=$FIREBASE_STORAGE_BUCKET" >> $GITHUB_OUTPUT
            echo "messaging_sender_id=$FIREBASE_MESSAGING_SENDER_ID" >> $GITHUB_OUTPUT
            echo "app_id=$FIREBASE_APP_ID" >> $GITHUB_OUTPUT
            echo "measurement_id=$FIREBASE_MEASUREMENT_ID" >> $GITHUB_OUTPUT
            echo "config_exists=true" >> $GITHUB_OUTPUT
          else
            echo "config_exists=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è  Firebase config secret not found"
          fi

      - name: Deploy frontend to Cloud Run
        id: deploy-frontend
        run: |
          # Get backend URL
          set -e

          BACKEND_URL="${{ steps.backend-url.outputs.url }}"
          if [ -z "$BACKEND_URL" ]; then
            BACKEND_URL="${{ needs.deploy-backend.outputs.url }}"
          fi

          # Build environment variables string
          ENV_VARS="VITE_API_URL=$BACKEND_URL/api"

          # Add Firebase config if available (as env vars, not secrets, since they're public in frontend)
          if [ "${{ steps.firebase-config.outputs.config_exists }}" == "true" ]; then
            ENV_VARS="$ENV_VARS"
            if [ -n "${{ steps.firebase-config.outputs.api_key }}" ]; then
              ENV_VARS="$ENV_VARS,VITE_FIREBASE_API_KEY=${{ steps.firebase-config.outputs.api_key }}"
            fi
            if [ -n "${{ steps.firebase-config.outputs.auth_domain }}" ]; then
              ENV_VARS="$ENV_VARS,VITE_FIREBASE_AUTH_DOMAIN=${{ steps.firebase-config.outputs.auth_domain }}"
            fi
            if [ -n "${{ steps.firebase-config.outputs.project_id }}" ]; then
              ENV_VARS="$ENV_VARS,VITE_FIREBASE_PROJECT_ID=${{ steps.firebase-config.outputs.project_id }}"
            fi
            if [ -n "${{ steps.firebase-config.outputs.storage_bucket }}" ]; then
              ENV_VARS="$ENV_VARS,VITE_FIREBASE_STORAGE_BUCKET=${{ steps.firebase-config.outputs.storage_bucket }}"
            fi
            if [ -n "${{ steps.firebase-config.outputs.messaging_sender_id }}" ]; then
              ENV_VARS="$ENV_VARS,VITE_FIREBASE_MESSAGING_SENDER_ID=${{ steps.firebase-config.outputs.messaging_sender_id }}"
            fi
            if [ -n "${{ steps.firebase-config.outputs.app_id }}" ]; then
              ENV_VARS="$ENV_VARS,VITE_FIREBASE_APP_ID=${{ steps.firebase-config.outputs.app_id }}"
            fi
            if [ -n "${{ steps.firebase-config.outputs.measurement_id }}" ]; then
              ENV_VARS="$ENV_VARS,VITE_FIREBASE_MEASUREMENT_ID=${{ steps.firebase-config.outputs.measurement_id }}"
            fi
          fi

          FRONTEND_URL=$(gcloud run deploy ${{ env.FRONTEND_SERVICE }} \
            --image gcr.io/${{ env.PROJECT_ID }}/${{ env.FRONTEND_SERVICE }}:${{ github.sha }} \
            --platform managed \
            --region ${{ env.REGION }} \
            --allow-unauthenticated \
            --port 80 \
            --memory 512Mi \
            --cpu 1 \
            --min-instances 0 \
            --max-instances 5 \
            --timeout 60 \
            --set-env-vars "$ENV_VARS" \
            --format="value(status.url)")

          echo "url=$FRONTEND_URL" >> $GITHUB_OUTPUT
          echo "‚úÖ Frontend deployed at: $FRONTEND_URL"

          if [ "${{ steps.firebase-config.outputs.config_exists }}" != "true" ]; then
            echo "‚ö†Ô∏è  Deployed without Firebase config. Configure Firebase env vars manually after deployment."
          fi

  deployment-summary:
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    if: always()
    steps:
      - name: Deployment Summary
        run: |
          echo "## üöÄ Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.deploy-backend.result }}" == "success" ]; then
            echo "‚úÖ Backend: ${{ needs.deploy-backend.outputs.url }}" >> $GITHUB_STEP_SUMMARY
            echo "üìä Health check: ${{ needs.deploy-backend.outputs.url }}/health" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå Backend deployment failed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.deploy-frontend.result }}" == "success" ]; then
            echo "‚úÖ Frontend: ${{ needs.deploy-frontend.outputs.url }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå Frontend deployment failed" >> $GITHUB_STEP_SUMMARY
          fi
