name: Deploy FlashLearn AI to Google Cloud Run

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-central1
  BACKEND_SERVICE: flashlearn-ai-backend
  FRONTEND_SERVICE: flashlearn-ai-frontend

jobs:
  # Test job
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run backend tests
        run: npm run test --workspace=@flashlearn-ai/backend

      - name: Run frontend tests
        run: npm run test --workspace=@flashlearn-ai/frontend

      - name: Run linting
        run: npm run lint

      - name: Type check
        run: npm run type-check --workspace=@flashlearn-ai/backend && npm run type-check --workspace=@flashlearn-ai/frontend

  # Build and deploy backend
  deploy-backend:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build backend
        run: npm run build:backend

      - name: Google Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker
        run: gcloud auth configure-docker

      - name: Build and push backend image
        run: |
          docker build -f packages/backend/Dockerfile -t gcr.io/$PROJECT_ID/$BACKEND_SERVICE:$GITHUB_SHA .
          docker push gcr.io/$PROJECT_ID/$BACKEND_SERVICE:$GITHUB_SHA

      - name: Deploy backend to Cloud Run
        run: |
          gcloud run deploy $BACKEND_SERVICE \
            --image gcr.io/$PROJECT_ID/$BACKEND_SERVICE:$GITHUB_SHA \
            --platform managed \
            --region $REGION \
            --allow-unauthenticated \
            --port 3000 \
            --memory 1Gi \
            --cpu 1 \
            --min-instances 0 \
            --max-instances 10 \
            --timeout 300 \
            --set-env-vars NODE_ENV=production,PORT=3000 \
            --set-env-vars FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }} \
            --set-env-vars GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}

  # Build and deploy frontend
  deploy-frontend:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build frontend
        run: npm run build:frontend

      - name: Google Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker
        run: gcloud auth configure-docker

      - name: Build and push frontend image
        run: |
          docker build -f packages/frontend/Dockerfile -t gcr.io/$PROJECT_ID/$FRONTEND_SERVICE:$GITHUB_SHA .
          docker push gcr.io/$PROJECT_ID/$FRONTEND_SERVICE:$GITHUB_SHA

      - name: Deploy frontend to Cloud Run
        run: |
          gcloud run deploy $FRONTEND_SERVICE \
            --image gcr.io/$PROJECT_ID/$FRONTEND_SERVICE:$GITHUB_SHA \
            --platform managed \
            --region $REGION \
            --allow-unauthenticated \
            --port 80 \
            --memory 512Mi \
            --cpu 1 \
            --min-instances 0 \
            --max-instances 5 \
            --timeout 60 \
                --set-env-vars VITE_API_URL=https://$BACKEND_SERVICE-$PROJECT_ID.a.run.app/api \
                --set-env-vars FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }} \
                --set-env-vars FIREBASE_AUTH_DOMAIN=${{ secrets.FIREBASE_AUTH_DOMAIN }} \
                --set-env-vars FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }} \
                --set-env-vars FIREBASE_STORAGE_BUCKET=${{ secrets.FIREBASE_STORAGE_BUCKET }} \
                --set-env-vars FIREBASE_MESSAGING_SENDER_ID=${{ secrets.FIREBASE_MESSAGING_SENDER_ID }} \
                --set-env-vars FIREBASE_APP_ID=${{ secrets.FIREBASE_APP_ID }} \
                --set-env-vars FIREBASE_MEASUREMENT_ID=${{ secrets.FIREBASE_MEASUREMENT_ID }}

  # Notify deployment status
  notify:
    needs: [deploy-backend, deploy-frontend]
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/main'

    steps:
      - name: Notify success
        if: needs.deploy-backend.result == 'success' && needs.deploy-frontend.result == 'success'
        run: |
          echo "✅ FlashLearn AI deployment successful!"
          echo "Backend: https://${{ env.BACKEND_SERVICE }}-${{ env.PROJECT_ID }}.a.run.app"
          echo "Frontend: https://${{ env.FRONTEND_SERVICE }}-${{ env.PROJECT_ID }}.a.run.app"

      - name: Notify failure
        if: needs.deploy-backend.result == 'failure' || needs.deploy-frontend.result == 'failure'
        run: |
          echo "❌ FlashLearn AI deployment failed!"
          echo "Backend status: ${{ needs.deploy-backend.result }}"
          echo "Frontend status: ${{ needs.deploy-frontend.result }}"
